{"version":3,"file":"guardrail_client.js","sources":["../src/util/util.ts","../src/util/ByteBuffer.ts","../src/crypto/sha256.ts","../src/util/URLBase64NoPadding.ts","../src/core.ts","../src/client.ts"],"sourcesContent":["\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\r\nconst util = {\r\n    encodeUtf8: null as unknown as (s:string) => string,\r\n    decodeUtf8: null as unknown as (s:string) => string,\r\n    fillString: null as unknown as (c:string, n:number) => string,\r\n    userLogger: null as unknown as (m: string, f: string, s:string) => void\r\n};\r\nutil.encodeUtf8 = function(s:string): string {\r\n    return unescape(encodeURIComponent(s));\r\n}\r\n\r\nutil.decodeUtf8 = function(s:string): string {\r\n    return decodeURIComponent(escape(s));\r\n}\r\nutil.fillString = function(c:string, n:number): string {\r\n    let s = '';\r\n    while(n > 0) {\r\n      if(n & 1) {\r\n        s += c;\r\n      }\r\n      n >>>= 1;\r\n      if(n > 0) {\r\n        c += c;\r\n      }\r\n    }\r\n    return s;\r\n  };\r\n\r\nexport default util;","import util from \"./util\";\r\n\r\nexport default class ByteBuffer {\r\n  data: string;\r\n  read: number;\r\n\r\n  constructor(b  = '') {\r\n    this.data = b;\r\n    this.read = 0;\r\n  }\r\n\r\n\r\n  static fromArrayBuffer(b: ArrayBuffer): ByteBuffer {\r\n    const arr = new Uint8Array(b);\r\n      try {\r\n        let data = [] as string[];\r\n        arr.map((v) => data.push(String.fromCharCode(v)));\r\n        return new ByteBuffer(data.join(''));\r\n      }\r\n      catch (e) {\r\n          for (let i = 0; i < arr.length; ++i) {\r\n              //this.putByte(arr[i]);\r\n          }\r\n          throw e;\r\n      }\r\n\r\n      return new ByteBuffer(\"123\");\r\n  }\r\n\r\n\r\n  length(): number {\r\n      return this.data.length - this.read;\r\n  }\r\n\r\n  isEmpty(): boolean {\r\n    return this.length() <= 0;\r\n  }\r\n\r\n  putByte (b:number): ByteBuffer {\r\n    this.data += String.fromCharCode(b);\r\n    return this;\r\n  }\r\n\r\n  fillWithByte(ch:number, n:number):ByteBuffer {\r\n    let b = String.fromCharCode(ch);\r\n    let d = this.data;\r\n    while(n > 0) {\r\n      if(n & 1) {\r\n        d += b;\r\n      }\r\n      n >>>= 1;\r\n      if(n > 0) {\r\n        b += b;\r\n      }\r\n    }\r\n    this.data = d;\r\n    return this;\r\n  }\r\n\r\n  putBytes(bytes:string): ByteBuffer {\r\n    this.data += bytes;\r\n    return this;\r\n  }\r\n\r\n  putString(str:string): ByteBuffer {\r\n    this.data += util.encodeUtf8(str);\r\n    return this;\r\n  }\r\n  \r\n  putInt16(i:number): ByteBuffer {\r\n    this.data +=\r\n      String.fromCharCode(i >> 8 & 0xFF) +\r\n      String.fromCharCode(i & 0xFF);\r\n    return this;\r\n  }\r\n  \r\n  putInt24(i:number): ByteBuffer {\r\n    this.data +=\r\n      String.fromCharCode(i >> 16 & 0xFF) +\r\n      String.fromCharCode(i >> 8 & 0xFF) +\r\n      String.fromCharCode(i & 0xFF);\r\n    return this;\r\n  }\r\n  \r\n  putInt32(i:number): ByteBuffer {\r\n    this.data +=\r\n      String.fromCharCode(i >> 24 & 0xFF) +\r\n      String.fromCharCode(i >> 16 & 0xFF) +\r\n      String.fromCharCode(i >> 8 & 0xFF) +\r\n      String.fromCharCode(i & 0xFF);\r\n    return this;\r\n  }\r\n  \r\n  putInt16Le(i:number): ByteBuffer {\r\n    this.data +=\r\n      String.fromCharCode(i & 0xFF) +\r\n      String.fromCharCode(i >> 8 & 0xFF);\r\n    return this;\r\n  }\r\n  \r\n  putInt24Le(i:number): ByteBuffer {\r\n    this.data +=\r\n      String.fromCharCode(i & 0xFF) +\r\n      String.fromCharCode(i >> 8 & 0xFF) +\r\n      String.fromCharCode(i >> 16 & 0xFF);\r\n    return this;\r\n  }\r\n  \r\n  putInt32Le(i:number): ByteBuffer {\r\n    this.data +=\r\n      String.fromCharCode(i & 0xFF) +\r\n      String.fromCharCode(i >> 8 & 0xFF) +\r\n      String.fromCharCode(i >> 16 & 0xFF) +\r\n      String.fromCharCode(i >> 24 & 0xFF);\r\n    return this;\r\n  }\r\n\r\n  putInt(i:number, n:number): ByteBuffer {\r\n    do {\r\n      n -= 8;\r\n      this.data += String.fromCharCode((i >> n) & 0xFF);\r\n    }\r\n    while(n > 0);\r\n    return this;\r\n  }\r\n  \r\n  putSignedInt(i:number, n:number): ByteBuffer {\r\n    if(i < 0) {\r\n      i += 2 << (n - 1);\r\n    }\r\n    return this.putInt(i, n);\r\n  }\r\n  \r\n  putBuffer(buffer:ByteBuffer): ByteBuffer {\r\n    this.data += buffer.getBytes();\r\n    return this;\r\n  }\r\n  \r\n  getByte(): number{\r\n    return this.data.charCodeAt(this.read++);\r\n  }\r\n  \r\n  getInt16function(): number {\r\n    const rval = (\r\n      this.data.charCodeAt(this.read) << 8 ^\r\n      this.data.charCodeAt(this.read + 1));\r\n    this.read += 2;\r\n    return rval;\r\n  }\r\n  \r\n  getInt24 (): number {\r\n    const rval = (\r\n      this.data.charCodeAt(this.read) << 16 ^\r\n      this.data.charCodeAt(this.read + 1) << 8 ^\r\n      this.data.charCodeAt(this.read + 2));\r\n    this.read += 3;\r\n    return rval;\r\n  }\r\n  \r\n  getInt32(): number {\r\n    const rval = (\r\n      this.data.charCodeAt(this.read) << 24 ^\r\n      this.data.charCodeAt(this.read + 1) << 16 ^\r\n      this.data.charCodeAt(this.read + 2) << 8 ^\r\n      this.data.charCodeAt(this.read + 3));\r\n    this.read += 4;\r\n    return rval;\r\n  }\r\n  \r\n  getInt16Le(): number {\r\n    const rval = (\r\n      this.data.charCodeAt(this.read) ^\r\n      this.data.charCodeAt(this.read + 1) << 8);\r\n    this.read += 2;\r\n    return rval;\r\n  }\r\n  \r\n  getInt24Le(): number {\r\n    const rval = (\r\n      this.data.charCodeAt(this.read) ^\r\n      this.data.charCodeAt(this.read + 1) << 8 ^\r\n      this.data.charCodeAt(this.read + 2) << 16);\r\n    this.read += 3;\r\n    return rval;\r\n  }\r\n  \r\n  getInt32Le(): number {\r\n    const rval = (\r\n      this.data.charCodeAt(this.read) ^\r\n      this.data.charCodeAt(this.read + 1) << 8 ^\r\n      this.data.charCodeAt(this.read + 2) << 16 ^\r\n      this.data.charCodeAt(this.read + 3) << 24);\r\n    this.read += 4;\r\n    return rval;\r\n  }\r\n  \r\n  getInt(n: number): number {\r\n    let rval = 0;\r\n    do {\r\n      rval = (rval << 8) + this.data.charCodeAt(this.read++);\r\n      n -= 8;\r\n    }\r\n    while(n > 0);\r\n    return rval;\r\n  }\r\n  \r\n  getSignedInt(n:number): number {\r\n    let x = this.getInt(n);\r\n    const max = 2 << (n - 2);\r\n    if(x >= max) {\r\n      x -= max << 1;\r\n    }\r\n    return x;\r\n  }\r\n  \r\n  getBytes(count?: number): string {\r\n    let rval;\r\n\r\n    if(count) {\r\n      // read count bytes\r\n      count = Math.min(this.length(), count);\r\n      rval = this.data.slice(this.read, this.read + count);\r\n      this.read += count;\r\n    }\r\n    else if(count === 0) {\r\n      rval = '';\r\n    }\r\n    else {\r\n      // read all bytes, optimize to only copy when needed\r\n      rval = (this.read === 0) ? this.data : this.data.slice(this.read);\r\n      this.clear();\r\n    }\r\n    return rval;\r\n  }\r\n  \r\n  bytes(count?: number): string {\r\n    return (typeof(count) === 'undefined' ?\r\n      this.data.slice(this.read) :\r\n      this.data.slice(this.read, this.read + count));\r\n  }\r\n  \r\n  at(i: number): number {\r\n    return this.data.charCodeAt(this.read + i);\r\n  }\r\n  \r\n  setAt(i:number, b:number): ByteBuffer {\r\n    this.data = this.data.substr(0, this.read + i) +\r\n      String.fromCharCode(b) +\r\n      this.data.substr(this.read + i + 1);\r\n    return this;\r\n  }\r\n  \r\n  last(): number {\r\n    return this.data.charCodeAt(this.data.length - 1);\r\n  }\r\n  \r\n  copy(): ByteBuffer {\r\n    const c = new ByteBuffer(this.data);\r\n    c.read = this.read;\r\n    return c;\r\n  }\r\n  \r\n  compact(): ByteBuffer {\r\n    if(this.read > 0) {\r\n      this.data = this.data.slice(this.read);\r\n      this.read = 0;\r\n    }\r\n    return this;\r\n  }\r\n  \r\n  clear(): ByteBuffer {\r\n    this.data = '';\r\n    this.read = 0;\r\n    return this;\r\n  }\r\n  \r\n  truncate(count: number): ByteBuffer {\r\n    const len = Math.max(0, this.length() - count);\r\n    this.data = this.data.substr(this.read, len);\r\n    this.read = 0;\r\n    return this;\r\n  }\r\n  \r\n  toHex(): string {\r\n    let rval = '';\r\n    for(let i = this.read; i < this.data.length; ++i) {\r\n      const b = this.data.charCodeAt(i);\r\n      if(b < 16) {\r\n        rval += '0';\r\n      }\r\n      rval += b.toString(16);\r\n    }\r\n    return rval;\r\n  }\r\n  \r\n  toString(): string {\r\n    return util.decodeUtf8(this.bytes());\r\n  }\r\n  \r\n}","import ByteBuffer from \"../util/ByteBuffer\";\r\nimport util from \"../util/util\";\r\n\r\n\r\nexport interface SHA256 {\r\n    create(): any;\r\n}\r\n\r\nconst sha256 = {} as SHA256;\r\n\r\n// sha-256 padding bytes not initialized yet\r\nlet _padding = null as unknown as string;\r\nlet _initialized = false;\r\n\r\n// table of constants\r\nlet _k = new Array<number>(64);\r\n\r\n/*\r\n * Initializes the constant tables.\r\n */\r\nconst _init = function() {\r\n  // create padding\r\n  _padding = String.fromCharCode(128);\r\n  _padding += util.fillString(String.fromCharCode(0x00), 64);\r\n\r\n  // create K table for SHA-256\r\n  _k = [\r\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\r\n    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\r\n    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\r\n    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\r\n    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\r\n    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\r\n    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\r\n    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\r\n    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\r\n\r\n  // now initialized\r\n  _initialized = true;\r\n};\r\n\r\n/*\r\n * Updates a SHA-256 state with the given byte buffer.\r\n *\r\n * @param s the SHA-256 state to update.\r\n * @param w the array to use to store words.\r\n * @param bytes the byte buffer to update with.\r\n */\r\nconst _update = function(s: any, w:[number], bytes: ByteBuffer) {\r\n  // consume 512 bit (64 byte) chunks\r\n  let t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;\r\n  let len = bytes.length();\r\n  while(len >= 64) {\r\n    // the w array will be populated with sixteen 32-bit big-endian words\r\n    // and then extended into 64 32-bit words according to SHA-256\r\n    for(i = 0; i < 16; ++i) {\r\n      w[i] = bytes.getInt32();\r\n    }\r\n    for(; i < 64; ++i) {\r\n      // XOR word 2 words ago rot right 17, rot right 19, shft right 10\r\n      t1 = w[i - 2];\r\n      t1 =\r\n        ((t1 >>> 17) | (t1 << 15)) ^\r\n        ((t1 >>> 19) | (t1 << 13)) ^\r\n        (t1 >>> 10);\r\n      // XOR word 15 words ago rot right 7, rot right 18, shft right 3\r\n      t2 = w[i - 15];\r\n      t2 =\r\n        ((t2 >>> 7) | (t2 << 25)) ^\r\n        ((t2 >>> 18) | (t2 << 14)) ^\r\n        (t2 >>> 3);\r\n      // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^32\r\n      w[i] = (t1 + w[i - 7] + t2 + w[i - 16]) & 0xFFFFFFFF;\r\n    }\r\n\r\n    // initialize hash value for this chunk\r\n    a = s.h0;\r\n    b = s.h1;\r\n    c = s.h2;\r\n    d = s.h3;\r\n    e = s.h4;\r\n    f = s.h5;\r\n    g = s.h6;\r\n    h = s.h7;\r\n\r\n    // round function\r\n    for(i = 0; i < 64; ++i) {\r\n      // Sum1(e)\r\n      s1 =\r\n        ((e >>> 6) | (e << 26)) ^\r\n        ((e >>> 11) | (e << 21)) ^\r\n        ((e >>> 25) | (e << 7));\r\n      // Ch(e, f, g) (optimized the same way as SHA-1)\r\n      ch = g ^ (e & (f ^ g));\r\n      // Sum0(a)\r\n      s0 =\r\n        ((a >>> 2) | (a << 30)) ^\r\n        ((a >>> 13) | (a << 19)) ^\r\n        ((a >>> 22) | (a << 10));\r\n      // Maj(a, b, c) (optimized the same way as SHA-1)\r\n      maj = (a & b) | (c & (a ^ b));\r\n\r\n      // main algorithm\r\n      t1 = h + s1 + ch + _k[i] + w[i];\r\n      t2 = s0 + maj;\r\n      h = g;\r\n      g = f;\r\n      f = e;\r\n      e = (d + t1) & 0xFFFFFFFF;\r\n      d = c;\r\n      c = b;\r\n      b = a;\r\n      a = (t1 + t2) & 0xFFFFFFFF;\r\n    }\r\n\r\n    // update hash state\r\n    s.h0 = (s.h0 + a) & 0xFFFFFFFF;\r\n    s.h1 = (s.h1 + b) & 0xFFFFFFFF;\r\n    s.h2 = (s.h2 + c) & 0xFFFFFFFF;\r\n    s.h3 = (s.h3 + d) & 0xFFFFFFFF;\r\n    s.h4 = (s.h4 + e) & 0xFFFFFFFF;\r\n    s.h5 = (s.h5 + f) & 0xFFFFFFFF;\r\n    s.h6 = (s.h6 + g) & 0xFFFFFFFF;\r\n    s.h7 = (s.h7 + h) & 0xFFFFFFFF;\r\n    len -= 64;\r\n  }\r\n};\r\n\r\n/**\r\n * Creates a SHA-256 message digest object.\r\n *\r\n * @return a message digest object.\r\n * @returns {ytcrypto.MessageDigest}\r\n */\r\nsha256.create = function() {\r\n  // do initialization as necessary\r\n  if(!_initialized) {\r\n    _init();\r\n  }\r\n\r\n  // SHA-256 state contains eight 32-bit integers\r\n  let _state = null as any;\r\n\r\n  // input buffer\r\n  let _input = new ByteBuffer();\r\n\r\n  // used for word storage\r\n  const _w = new Array(64) as [number];\r\n\r\n  // message digest object\r\n  const md = {\r\n    algorithm: 'sha256',\r\n    blockLength: 64,\r\n    digestLength: 32,\r\n    // length of message so far (does not including padding)\r\n    messageLength: 0,\r\n    start: null as any,\r\n    update: null as any,\r\n    digest: null as any\r\n  };\r\n\r\n  /**\r\n   * Starts the digest.\r\n   *\r\n   * @return this digest object.\r\n   */\r\n  md.start = function() {\r\n    md.messageLength = 0;\r\n    _input = new ByteBuffer();\r\n    _state = {\r\n      h0: 0x6A09E667,\r\n      h1: 0xBB67AE85,\r\n      h2: 0x3C6EF372,\r\n      h3: 0xA54FF53A,\r\n      h4: 0x510E527F,\r\n      h5: 0x9B05688C,\r\n      h6: 0x1F83D9AB,\r\n      h7: 0x5BE0CD19\r\n    };\r\n    return md;\r\n  };\r\n  // start digest automatically for first time\r\n  md.start();\r\n\r\n  /**\r\n   * Updates the digest with the given message input. The given input can\r\n   * treated as raw input (no encoding will be applied) or an encoding of\r\n   * 'utf8' maybe given to encode the input using UTF-8.\r\n   *\r\n   * @param msg the message input to update with.\r\n   * @param encoding the encoding to use (default: 'raw', other: 'utf8').\r\n   *\r\n   * @return this digest object.\r\n   */\r\n  md.update = function(msg:string, encoding:string) {\r\n    if(encoding === 'utf8') {\r\n      msg = util.encodeUtf8(msg);\r\n    }\r\n\r\n    // update message length\r\n    md.messageLength += msg.length;\r\n\r\n    // add bytes to input buffer\r\n    _input.putBytes(msg);\r\n\r\n    // process bytes\r\n    _update(_state, _w, _input);\r\n\r\n    // compact input buffer every 2K or if empty\r\n    if(_input.read > 2048 || _input.length() === 0) {\r\n      _input.compact();\r\n    }\r\n\r\n    return md;\r\n  };\r\n\r\n  /**\r\n   * Produces the digest.\r\n   *\r\n   * @return a byte buffer containing the digest value.\r\n   */\r\n  md.digest = function(): ByteBuffer {\r\n    /* Note: Here we copy the remaining bytes in the input buffer and\r\n      add the appropriate SHA-256 padding. Then we do the final update\r\n      on a copy of the state so that if the user wants to get\r\n      intermediate digests they can do so. */\r\n\r\n    /* Determine the number of bytes that must be added to the message\r\n      to ensure its length is congruent to 448 mod 512. In other words,\r\n      a 64-bit integer that gives the length of the message will be\r\n      appended to the message and whatever the length of the message is\r\n      plus 64 bits must be a multiple of 512. So the length of the\r\n      message must be congruent to 448 mod 512 because 512 - 64 = 448.\r\n\r\n      In order to fill up the message length it must be filled with\r\n      padding that begins with 1 bit followed by all 0 bits. Padding\r\n      must *always* be present, so if the message length is already\r\n      congruent to 448 mod 512, then 512 padding bits must be added. */\r\n\r\n    // 512 bits == 64 bytes, 448 bits == 56 bytes, 64 bits = 8 bytes\r\n    // _padding starts with 1 byte with first bit is set in it which\r\n    // is byte value 128, then there may be up to 63 other pad bytes\r\n    const len = md.messageLength;\r\n    const padBytes = new ByteBuffer()\r\n    padBytes.putBytes(_input.bytes());\r\n    padBytes.putBytes(_padding.substr(0, 64 - ((len + 8) % 64)));\r\n\r\n    /* Now append length of the message. The length is appended in bits\r\n      as a 64-bit number in big-endian order. Since we store the length\r\n      in bytes, we must multiply it by 8 (or left shift by 3). So here\r\n      store the high 3 bits in the low end of the first 32-bits of the\r\n      64-bit number and the lower 5 bits in the high end of the second\r\n      32-bits. */\r\n    padBytes.putInt32((len >>> 29) & 0xFF);\r\n    padBytes.putInt32((len << 3) & 0xFFFFFFFF);\r\n    const s2 = {\r\n      h0: _state.h0,\r\n      h1: _state.h1,\r\n      h2: _state.h2,\r\n      h3: _state.h3,\r\n      h4: _state.h4,\r\n      h5: _state.h5,\r\n      h6: _state.h6,\r\n      h7: _state.h7\r\n    };\r\n    _update(s2, _w, padBytes);\r\n    const rval = new ByteBuffer();\r\n    rval.putInt32(s2.h0);\r\n    rval.putInt32(s2.h1);\r\n    rval.putInt32(s2.h2);\r\n    rval.putInt32(s2.h3);\r\n    rval.putInt32(s2.h4);\r\n    rval.putInt32(s2.h5);\r\n    rval.putInt32(s2.h6);\r\n    rval.putInt32(s2.h7);\r\n    return rval;\r\n  };\r\n\r\n  return md;\r\n};\r\n\r\nexport default sha256;\r\n","const _base64 =\r\n'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\r\n\r\nconst _base64Idx = [\r\n/*43 -43 = 0*/\r\n/*'+',  1,  2,  3,'/' */\r\n62, -1, 62, -1, 63,\r\n\r\n\t/*'0','1','2','3','4','5','6','7','8','9' */\r\n\t52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\r\n\r\n\t/*15, 16, 17,'=', 19, 20, 21 */\r\n\t-1, -1, -1, 64, -1, -1, -1,\r\n\r\n\t/*65 - 43 = 22*/\r\n\t/*'A','B','C','D','E','F','G','H','I','J','K','L','M', */\r\n\t0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\r\n\r\n\t/*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */\r\n\t13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\r\n\r\n\t/*91 - 43 = 48 */\r\n\t/*48, 49, 50, 51, 52, 53 */\r\n\t-1, -1, -1, -1, 63, -1,\r\n\r\n\t/*97 - 43 = 54*/\r\n\t/*'a','b','c','d','e','f','g','h','i','j','k','l','m' */\r\n\t26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\r\n\r\n\t/*'n','o','p','q','r','s','t','u','v','w','x','y','z' */\r\n\t39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\r\n\t];\r\n\r\nfunction encode64 (input: string): string {\r\n\tlet line = '';\r\n\tlet output = '';\r\n\tlet chr1, chr2, chr3;\r\n\tlet i = 0;\r\n\twhile (i < input.length) {\r\n\t\tchr1 = input.charCodeAt(i++);\r\n\t\tchr2 = input.charCodeAt(i++);\r\n\t\tchr3 = input.charCodeAt(i++);\r\n\r\n\t\t// encode 4 character group\r\n\t\tline += _base64.charAt(chr1 >> 2);\r\n\t\tline += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));\r\n\t\tif (!isNaN(chr2)) {\r\n\t\t\tline += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));\r\n\t\t\tline += isNaN(chr3) ? '' : _base64.charAt(chr3 & 63);\r\n\t\t}\r\n\t}\r\n\toutput += line;\r\n\r\n\treturn output;\r\n}\r\n\r\nfunction decode64(input: string): string {\r\n\t// remove all non-base64 characters\r\n\tinput = input.replace(/[^A-Za-z0-9\\-_=]/g, '');\r\n\tconst remain = input.length % 4;\r\n\tif (remain == 2) { input += '=='; } else if (remain == 3) { input += '='; }\r\n\r\n\tlet output = '';\r\n\tlet enc1, enc2, enc3, enc4;\r\n\tlet i = 0;\r\n\r\n\twhile (i < input.length) {\r\n\t\tenc1 = _base64Idx[input.charCodeAt(i++) - 43];\r\n\t\tenc2 = _base64Idx[input.charCodeAt(i++) - 43];\r\n\t\tenc3 = _base64Idx[input.charCodeAt(i++) - 43];\r\n\t\tenc4 = _base64Idx[input.charCodeAt(i++) - 43];\r\n\r\n\t\toutput += String.fromCharCode((enc1 << 2) | (enc2 >> 4));\r\n\t\tif (enc3 !== 64) {\r\n\t\t\t// decoded at least 2 bytes\r\n\t\t\toutput += String.fromCharCode(((enc2 & 15) << 4) | (enc3 >> 2));\r\n\t\t\tif (enc4 !== 64) {\r\n\t\t\t\t// decoded 3 bytes\r\n\t\t\t\toutput += String.fromCharCode(((enc3 & 3) << 6) | enc4);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn output;\r\n}\r\n\r\nexport interface IURLBase64NoPadding {\r\n    (str:string): string;\r\n    encode(str:string): string;\r\n    decode(str:string): string;\r\n}\r\n\r\nconst URLBase64NoPadding = encode64 as IURLBase64NoPadding;\r\nURLBase64NoPadding.encode = encode64;\r\nURLBase64NoPadding.decode = decode64;\r\n\r\nexport default URLBase64NoPadding;\r\n","import sha256 from \"./crypto/sha256\"\r\nimport URLBase64NoPadding from \"./util/URLBase64NoPadding\";\r\n\r\nfunction hash(msg:string, n:number) {\r\n    let md = sha256.create();\r\n    let input = msg;\r\n    for (let iter = 0; iter < n; ++iter) {\r\n        md.start();\r\n        md.update(input);\r\n        input = md.digest().bytes();\r\n    }\r\n\r\n    return input;\r\n}\r\n\r\nfunction createUserBaseCredential(up: string, config: client_config) {\r\n\r\n    const ubc = hash(up, config.ubci);\r\n\r\n    console.log(`createUserBaseCredential: ubc(${URLBase64NoPadding.encode(ubc)})`)\r\n\r\n    return ubc;\r\n}\r\n\r\nfunction createUserCredentialWithUP(up: string, config: client_config) {\r\n\r\n    const hup = hash(up, config.ubci + config.hubci);\r\n    const uc = hash(hup + config.sc, config.fi);\r\n    console.log(`createUserCredentialWithUP: hup(${URLBase64NoPadding.encode(hup)})`)\r\n    console.log(`createUserCredentialWithUP: uc(${URLBase64NoPadding.encode(uc)})`)\r\n    console.log(`createUserCredentialWithUP: sc(${config.sc})`)\r\n\r\n    return uc;\r\n}\r\n\r\nfunction createUserCredentialWithUBC(ubc: string, config: client_config) {\r\n    const hubc = hash(ubc, config.hubci);\r\n\r\n    const uc= hash(hubc+config.sc, config.fi)\r\n    console.log(`createUserCredentialWithUBC: hubc(${URLBase64NoPadding.encode(hubc)})`)\r\n    console.log(`createUserCredentialWithUBC: uc(${URLBase64NoPadding.encode(uc)})`)\r\n    console.log(`createUserCredentialWithUBC: sc(${config.sc})`)\r\n\r\n    return uc;\r\n}\r\n\r\n\r\nexport {\r\n    createUserBaseCredential,\r\n    createUserCredentialWithUP,\r\n    createUserCredentialWithUBC\r\n}","import { createUserBaseCredential, createUserCredentialWithUBC, createUserCredentialWithUP } from \"./core\";\r\nimport URLBase64NoPadding from \"./util/URLBase64NoPadding\";\r\n\r\nexport default class guardrail_client {\r\n\r\n    config: client_config;\r\n    constructor(config: string) {\r\n        this.config = JSON.parse(URLBase64NoPadding.decode(config)) as client_config;\r\n\r\n        console.log('client config');\r\n        console.log(config);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param up UserPassword\r\n     * @returns \r\n     */\r\n    async newUser(up: string) {\r\n        console.log(`newUser: input(${up})`);\r\n\r\n        const ubc = createUserBaseCredential(up, this.config);\r\n        const uc = createUserCredentialWithUBC(ubc, this.config);\r\n\r\n        return JSON.stringify({ubc:URLBase64NoPadding.encode(ubc), uc:URLBase64NoPadding.encode(uc)});\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param oup OldUserPassword\r\n     * @param nup NewUserPassword\r\n     */\r\n    async changeUser(oup: string, nup: string) {\r\n        console.log(\"changeUser\");\r\n\r\n        const newer = JSON.parse(await this.newUser(nup));\r\n        const ouc = await this.authUser(oup);\r\n\r\n        return {\r\n            nubc: newer.ubc,\r\n            nuc: newer.uc,\r\n            ouc\r\n        };\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param up UserPassword\r\n     * @returns \r\n     */\r\n    async authUser(up: string) {\r\n        console.log(\"authUser\");\r\n\r\n        const uc = createUserCredentialWithUP(up, this.config);\r\n        return URLBase64NoPadding.encode(uc);\r\n    }\r\n\r\n};"],"names":["util","encodeUtf8","decodeUtf8","fillString","userLogger","s","unescape","encodeURIComponent","decodeURIComponent","escape","c","n","let","ByteBuffer","constructor","b","this","data","read","fromArrayBuffer","arr","Uint8Array","map","push","String","fromCharCode","v","join","e","i","length","isEmpty","putByte","fillWithByte","ch","d","putBytes","bytes","putString","str","putInt16","putInt24","putInt32","putInt16Le","putInt24Le","putInt32Le","putInt","putSignedInt","putBuffer","buffer","getBytes","getByte","charCodeAt","getInt16function","rval","getInt24","getInt32","getInt16Le","getInt24Le","getInt32Le","getInt","getSignedInt","x","max","count","Math","min","slice","clear","at","setAt","substr","last","copy","compact","truncate","len","toHex","toString","sha256","_padding","_initialized","_k","Array","_init","_update","w","t1","t2","s0","s1","maj","a","f","g","h","h0","h1","h2","h3","h4","h5","h6","h7","_base64","create","_state","_input","_w","md","algorithm","blockLength","digestLength","messageLength","start","update","digest","msg","encoding","padBytes","s2","_base64Idx","encode64","input","line","chr1","chr2","chr3","output","charAt","isNaN","decode64","enc1","enc2","enc3","enc4","remain","replace","URLBase64NoPadding","hash","iter","createUserBaseCredential","up","config","ubc","ubci","createUserCredentialWithUP","hup","hubci","uc","sc","fi","createUserCredentialWithUBC","hubc","encode","decode","guardrail_client","JSON","parse","newUser","stringify","changeUser","oup","nup","newer","ouc","authUser","nubc","nuc"],"mappings":"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"}